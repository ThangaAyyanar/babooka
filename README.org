#+title: Babashka Babooka

* Introduction

There are two types of programmers in the world: the practical, sensible,
shell-resigned people who need to google the correct argument order for `ln -s`
-- and those twisted, Stochholmed souls who will gleefully spend a weekend
cooking up hundreds of lines of bash.

This guide is for the former. For the latter: sorry, but I can't help you.

[[https://babashka.org][Babashka]] is a Clojure scripting runtime that is a
powerful, delightful alternative to the shell scripts you're used to. This is a
comprehensive tutorial that will help you understand:

- What babashka is, what it does, how it works, and how it can fit into your
  toolset
- How to write babashka scripts
- How to organize your babashka projects
- What pods and tasks are, and how to use them

If you'd like to stop doing something that hurts (writing incomprehensible shell
scripts) and start doing something that feels great (writing Babashka scripts),
then read on!

** What is Babashka?

From a user perspective, babashka is a scripting runtime for the Clojure
programming language. It lets you execute Clojure programs in contexts where
you'd typically used bash, ruby, python, and the like. You can run something
like the following in a terminal to immediately execute your Clojure program:

#+begin_src bash
bb my-clojure-program.clj
#+end_src

If you're familiar with Clojure, you'll find this significant because it
eliminates the startup time you'd otherwise have to contend with for a
JVM-compiled Clojure program. It also uses much less memory than running a jar.
Babashka makes it feasible to use Clojure even more than you already do.

If you're unfamiliar with Clojure, using Babashka is a great way to try out the
language. Clojure is a /hosted/ language, meaning that the language is defined
independently of the underlying runtime environment. Most Clojure programs are
compiled to run on the Java Virtual Machine so that they can be run anywhere
Java runs. The other main target is JavaScript, allowing Clojure to run in a
browser. With Babashka, you can now write Clojure programs where you'd normally
write bash. The time you spend investing in Clojure pays dividends as your
knowledge transfers to these varied environments.

From an implementation perspective, Babashka is a self-contained,
natively-compiled binary that uses the [[https://github.com/babashka/SCI][Small Clojure Interpreter (SCI)]] to
interpret Clojure on the fly. Its implementation of Clojure is nearly at parity
with JVM Clojure, and it improves daily thanks to [[https://github.com/borkdude][Michiel Borkent]]'s ceaseless
work. It's built with GraalVM. This guide is focused on becoming productive with
Babashka, and so I won't be going into any more implementation details.

** Why should you use it?

I won't go into the benefits of Clojure itself because there are plenty of
materials on that [[https://jobs-blog.braveclojure.com/2022/03/24/long-term-clojure-benefits.html][elsewhere]].

Beyond the fact that it's Clojure, Babashka brings a few features that make it
stand apart from contenders:

*First-class support for multi-threaded programming.* Clojure makes
multi-threaded programming simple and easy to write and reason about. With
Babashka, you can write straightforward scripts that e.g. fetch data from
multiple databases in parallel.

*Real testing.* You can unit test your Babashka code just as you would any other
Clojure project, and you can use other testing libraries as you see fit.

*Interactive Development.* Following the lisp tradition, Babashka provides a
read-eval-print loop (REPL) that gives you that good good bottom-up
fast-feedback feeling. Script development is inherently a fast; Babashka makes
it faster.

*A built-in task interface.* One reason to write a shell script is to provide a
concise, understandable interface for a complicated process. For example, you
might write a build script that includes ~build~ and ~deploy~ commands that you
call like

#+begin_src bash
./my-script build
./my-script deploy
#+end_src

Babashka comes with a task interface which gives you a consistent way of
defining such commands. Take that, bash!

*A rich set of libraries.* Babashka comes with a helper utilities for doing
typical shell script grunt work like interacting with processes or mucking about
with the filesystem. It also has support for the following without needing
extra dependencies:

- JSON parsing
- YAML parsing
- Starting an HTTP server
- Writing generative tests

And of course, you can add Clojure libraries as dependencies to accomplish even
more.

** Installation

Installing with brew is ~brew install borkdude/brew/babashka~.

[[https://github.com/babashka/babashka#installation][For other systems, see Babashka's complete installation instructions.]]


* Your first script
**
* COMMENT outline
** What is babashka?
*** how it's meant to be used
*** implementation
** Who should use it?
*** learning clojure
*** experienced clojure developers
*** people who work on the command line
** Why should you use it?
*** fast learning tool
*** powerful of a real programming language
*** seamless multithreading
*** self-contained environment
*** task management
** Installation
** Your first script
*** writing your first script
*** invoking it
*** output
** built-in facilities
** IO
** project organization
*** the library ecosystem
*** bb.edn
** pods
** tasks
